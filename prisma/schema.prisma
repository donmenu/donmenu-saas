generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id                   Int                 @id @default(autoincrement())
  name                 String              @db.VarChar(255)
  active               Boolean             @default(true)
  address              String?
  city                 String?             @db.VarChar(100)
  cnpj                 String?             @unique @db.VarChar(18)
  created_at           DateTime            @default(now())
  email                String              @db.VarChar(255)
  logo_url             String?             @db.VarChar(500)
  phone                String?             @db.VarChar(20)
  plan_type            String              @default("free") @db.VarChar(20)
  state                String?             @db.VarChar(2)
  updated_at           DateTime            @updatedAt
  zip_code             String?             @db.VarChar(10)
  userId               Int
  user                 User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  cash_registers       CashRegister[]
  financial_categories FinancialCategory[]
  categories           Category[]
  combo_items          ComboItem[]
  combos               Combo[]
  expenses             Expense[]
  ingredient_prices    IngredientPrice[]
  ingredients          Ingredient[]
  order_items          OrderItem[]
  menu_items           MenuItem[]
  menus                Menu[]
  orders               Order[]
  revenues             Revenue[]
  recipe_ingredients   RecipeIngredient[]
  recipes              Recipe[]
  sale_items           SaleItem[]
  sales                Sale[]

  @@map("restaurants")
}

model User {
  id            Int        @id @default(autoincrement())
  name          String     @db.VarChar(255)
  email         String     @unique @db.VarChar(255)
  active        Boolean    @default(true)
  avatar_url    String?    @db.VarChar(500)
  created_at    DateTime   @default(now())
  google_id     String?    @unique @db.VarChar(255)
  last_login    DateTime?
  password      String?    @db.VarChar(255)
  role          String     @default("user") @db.VarChar(20)
  phone         String?    @db.VarChar(20)
  address       String?    @db.VarChar(500)
  bio           String?    @db.Text
  updated_at    DateTime   @updatedAt
  restaurants   Restaurant[]

  @@index([email])
  @@index([google_id])
  @@map("users")
}

model Category {
  name          String     @db.VarChar(100)
  description   String?
  active        Boolean    @default(true)
  color         String?    @db.VarChar(7)
  created_at    DateTime   @default(now())
  icon          String?    @db.VarChar(50)
  id            Int        @id @default(autoincrement())
  restaurant_id Int
  sort_order    Int        @default(0)
  updated_at    DateTime   @updatedAt
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  menu_items    MenuItem[]
  recipes       Recipe[]

  @@unique([restaurant_id, name])
  @@index([restaurant_id])
  @@index([restaurant_id, active])
  @@map("categories")
}

model Ingredient {
  name               String             @db.VarChar(255)
  unit               String             @db.VarChar(20)
  cost_per_unit      Decimal            @db.Decimal(10, 2)
  created_at         DateTime           @default(now())
  active             Boolean            @default(true)
  current_stock      Decimal            @default(0) @db.Decimal(10, 2)
  description        String?
  id                 Int                @id @default(autoincrement())
  min_stock          Decimal?           @db.Decimal(10, 2)
  restaurant_id      Int
  supplier           String?            @db.VarChar(255)
  image_url          String?            @db.VarChar(500)
  updated_at         DateTime           @updatedAt
  prices             IngredientPrice[]
  restaurant         Restaurant         @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  recipe_ingredients RecipeIngredient[]

  @@unique([restaurant_id, name])
  @@index([restaurant_id])
  @@index([restaurant_id, active])
  @@index([restaurant_id, name])
  @@map("ingredients")
}

model IngredientPrice {
  id            Int        @id @default(autoincrement())
  restaurant_id Int
  ingredient_id Int
  price         Decimal    @db.Decimal(10, 2)
  supplier      String?    @db.VarChar(255)
  valid_from    DateTime   @default(now())
  valid_to      DateTime?
  created_at    DateTime   @default(now())
  ingredient    Ingredient @relation(fields: [ingredient_id], references: [id], onDelete: Cascade)
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  @@index([restaurant_id, ingredient_id])
  @@index([ingredient_id, valid_from])
  @@map("ingredient_prices")
}

model Recipe {
  id               Int                @id @default(autoincrement())
  restaurant_id    Int
  category_id      Int?
  name             String             @db.VarChar(255)
  description      String?
  yield_quantity   Decimal            @db.Decimal(10, 2)
  yield_unit       String             @db.VarChar(20)
  preparation_time Int?
  difficulty       String?            @db.VarChar(20)
  instructions     String?
  image_url        String?            @db.VarChar(500)
  active           Boolean            @default(true)
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  total_cost       Decimal?           @db.Decimal(10, 2)
  cost_per_yield   Decimal?           @db.Decimal(10, 2)
  menu_items       MenuItem[]
  ingredients      RecipeIngredient[]
  category         Category?          @relation(fields: [category_id], references: [id])
  restaurant       Restaurant         @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  @@unique([restaurant_id, name])
  @@index([restaurant_id])
  @@index([restaurant_id, category_id])
  @@index([restaurant_id, active])
  @@map("recipes")
}

model RecipeIngredient {
  id            Int        @id @default(autoincrement())
  restaurant_id Int
  recipe_id     Int
  ingredient_id Int
  quantity      Decimal    @db.Decimal(10, 4)
  unit          String     @db.VarChar(20)
  cost          Decimal?   @db.Decimal(10, 2)
  notes         String?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  ingredient    Ingredient @relation(fields: [ingredient_id], references: [id], onDelete: Cascade)
  recipe        Recipe     @relation(fields: [recipe_id], references: [id], onDelete: Cascade)
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  @@unique([restaurant_id, recipe_id, ingredient_id])
  @@index([restaurant_id, recipe_id])
  @@index([ingredient_id])
  @@map("recipe_ingredients")
}

model Menu {
  restaurant_id Int
  name          String     @db.VarChar(255)
  description   String?
  active        Boolean    @default(true)
  created_at    DateTime   @default(now())
  id            Int        @id @default(autoincrement())
  sort_order    Int        @default(0)
  type          String     @db.VarChar(50)
  is_promotional Boolean   @default(false)
  discount_percentage Decimal? @db.Decimal(5, 2)
  valid_from    DateTime?
  valid_to      DateTime?
  image_url     String?    @db.VarChar(500)
  updated_at    DateTime   @updatedAt
  items         MenuItem[]
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  @@unique([restaurant_id, name])
  @@index([restaurant_id])
  @@index([restaurant_id, active])
  @@index([restaurant_id, is_promotional])
  @@map("menus")
}

model MenuItem {
  id              Int         @id @default(autoincrement())
  restaurant_id   Int
  menu_id         Int
  recipe_id       Int?
  category_id     Int?
  name            String      @db.VarChar(255)
  description     String?
  price           Decimal     @db.Decimal(10, 2)
  suggested_price Decimal?    @db.Decimal(10, 2)
  desired_margin  Decimal?    @db.Decimal(5, 2)
  cost_price      Decimal?    @db.Decimal(10, 2)
  gross_profit    Decimal?    @db.Decimal(10, 2)
  actual_margin   Decimal?    @db.Decimal(5, 2)
  manual_pricing  Boolean     @default(false)
  image_url       String?     @db.VarChar(500)
  active          Boolean     @default(true)
  visible         Boolean     @default(true)
  sort_order      Int         @default(0)
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  combo_items     ComboItem[]
  order_items     OrderItem[]
  category        Category?   @relation(fields: [category_id], references: [id])
  menu            Menu        @relation(fields: [menu_id], references: [id], onDelete: Cascade)
  recipe          Recipe?     @relation(fields: [recipe_id], references: [id])
  restaurant      Restaurant  @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  sale_items      SaleItem[]

  @@unique([restaurant_id, menu_id, name])
  @@index([restaurant_id, menu_id])
  @@index([restaurant_id, active])
  @@index([restaurant_id, visible])
  @@index([recipe_id])
  @@index([category_id])
  @@map("menu_items")
}

model Combo {
  id            Int         @id @default(autoincrement())
  restaurant_id Int
  name          String      @db.VarChar(255)
  description   String?
  price         Decimal     @db.Decimal(10, 2)
  discount      Decimal?    @db.Decimal(5, 2)
  active        Boolean     @default(true)
  valid_from    DateTime?
  valid_to      DateTime?
  image_url     String?     @db.VarChar(500)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  items         ComboItem[]
  restaurant    Restaurant  @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  sale_items    SaleItem[]

  @@unique([restaurant_id, name])
  @@index([restaurant_id])
  @@index([restaurant_id, active])
  @@map("combos")
}

model ComboItem {
  id            Int        @id @default(autoincrement())
  restaurant_id Int
  combo_id      Int
  menu_item_id  Int
  quantity      Int        @default(1)
  discount      Decimal?   @db.Decimal(5, 2)
  created_at    DateTime   @default(now())
  combo         Combo      @relation(fields: [combo_id], references: [id], onDelete: Cascade)
  menu_item     MenuItem   @relation(fields: [menu_item_id], references: [id], onDelete: Cascade)
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  @@unique([restaurant_id, combo_id, menu_item_id])
  @@index([restaurant_id, combo_id])
  @@index([menu_item_id])
  @@map("combo_items")
}

model Sale {
  id             Int        @id @default(autoincrement())
  restaurant_id  Int
  sale_number    String     @db.VarChar(50)
  customer_name  String?    @db.VarChar(255)
  customer_phone String?    @db.VarChar(20)
  subtotal       Decimal    @db.Decimal(10, 2)
  discount       Decimal    @default(0) @db.Decimal(10, 2)
  total          Decimal    @db.Decimal(10, 2)
  payment_method String     @db.VarChar(50)
  status         String     @default("completed") @db.VarChar(20)
  notes          String?
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  items          SaleItem[]
  restaurant     Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  @@unique([restaurant_id, sale_number])
  @@index([restaurant_id])
  @@index([restaurant_id, created_at])
  @@index([restaurant_id, status])
  @@map("sales")
}

model SaleItem {
  id            Int        @id @default(autoincrement())
  restaurant_id Int
  sale_id       Int
  menu_item_id  Int
  combo_id      Int?
  quantity      Int
  unit_price    Decimal    @db.Decimal(10, 2)
  total_price   Decimal    @db.Decimal(10, 2)
  cost_price    Decimal?   @db.Decimal(10, 2)
  gross_profit  Decimal?   @db.Decimal(10, 2)
  margin        Decimal?   @db.Decimal(5, 2)
  created_at    DateTime   @default(now())
  combo         Combo?     @relation(fields: [combo_id], references: [id])
  menu_item     MenuItem   @relation(fields: [menu_item_id], references: [id])
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  sale          Sale       @relation(fields: [sale_id], references: [id], onDelete: Cascade)

  @@index([restaurant_id, sale_id])
  @@index([menu_item_id])
  @@index([combo_id])
  @@index([restaurant_id, created_at])
  @@map("sale_items")
}

model CashRegister {
  id             Int        @id @default(autoincrement()) @map("caixa_id")
  opening_date   DateTime   @default(now()) @map("data_abertura")
  closing_date   DateTime?  @map("data_fechamento")
  initial_amount Decimal    @default(0) @map("valor_inicial") @db.Decimal(10, 2)
  final_amount   Decimal?   @map("valor_final") @db.Decimal(10, 2)
  notes          String?    @map("observacoes")
  status         String     @default("aberto") @db.VarChar(20)
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  restaurant_id  Int
  restaurant     Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  expenses       Expense[]
  revenues       Revenue[]

  @@index([restaurant_id])
  @@index([restaurant_id, status])
  @@index([restaurant_id, opening_date])
  @@map("caixa")
}

model FinancialCategory {
  id            Int        @id @default(autoincrement()) @map("categoria_id")
  name          String     @map("nome") @db.VarChar(100)
  type          String     @map("tipo") @db.VarChar(20)
  description   String?    @map("descricao")
  color         String?    @map("cor") @db.VarChar(7)
  created_at    DateTime   @default(now())
  restaurant_id Int
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  expenses      Expense[]
  revenues      Revenue[]

  @@unique([restaurant_id, name, type])
  @@index([restaurant_id])
  @@index([restaurant_id, type])
  @@map("categorias_financeiras")
}

model Revenue {
  id               Int                @id @default(autoincrement()) @map("receita_id")
  cash_register_id Int?               @map("caixa_id")
  category_id      Int?               @map("categoria_id")
  order_id         Int?               @map("pedido_id")
  description      String             @map("descricao")
  amount           Decimal            @map("valor") @db.Decimal(10, 2)
  revenue_date     DateTime           @default(now()) @map("data_receita")
  payment_method   String?            @map("forma_pagamento") @db.VarChar(50)
  notes            String?            @map("observacoes")
  created_at       DateTime           @default(now())
  restaurant_id    Int
  cash_register    CashRegister?      @relation(fields: [cash_register_id], references: [id])
  category         FinancialCategory? @relation(fields: [category_id], references: [id])
  order            Order?             @relation(fields: [order_id], references: [id])
  restaurant       Restaurant         @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  @@index([restaurant_id])
  @@index([restaurant_id, revenue_date])
  @@index([restaurant_id, category_id])
  @@index([cash_register_id])
  @@index([order_id])
  @@map("receitas")
}

model Expense {
  id               Int                @id @default(autoincrement()) @map("despesa_id")
  cash_register_id Int?               @map("caixa_id")
  category_id      Int?               @map("categoria_id")
  description      String             @map("descricao")
  amount           Decimal            @map("valor") @db.Decimal(10, 2)
  expense_date     DateTime           @default(now()) @map("data_despesa")
  payment_method   String?            @map("forma_pagamento") @db.VarChar(50)
  supplier         String?            @map("fornecedor") @db.VarChar(255)
  invoice_number   String?            @map("nota_fiscal") @db.VarChar(100)
  notes            String?            @map("observacoes")
  created_at       DateTime           @default(now())
  restaurant_id    Int
  cash_register    CashRegister?      @relation(fields: [cash_register_id], references: [id])
  category         FinancialCategory? @relation(fields: [category_id], references: [id])
  restaurant       Restaurant         @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  @@index([restaurant_id])
  @@index([restaurant_id, expense_date])
  @@index([restaurant_id, category_id])
  @@index([cash_register_id])
  @@map("despesas")
}

model Order {
  id             Int         @id @default(autoincrement()) @map("pedido_id")
  status         String      @default("pendente") @db.VarChar(20)
  total          Decimal     @map("total") @db.Decimal(10, 2)
  notes          String?     @map("observacoes")
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  discount       Decimal     @default(0) @map("desconto") @db.Decimal(10, 2)
  payment_method String?     @map("forma_pagamento") @db.VarChar(50)
  customer_name  String?     @map("nome_cliente") @db.VarChar(255)
  table_number   String?     @map("numero_mesa") @db.VarChar(10)
  order_number   String      @map("numero_pedido") @db.VarChar(50)
  restaurant_id  Int
  subtotal       Decimal     @map("subtotal") @db.Decimal(10, 2)
  customer_phone String?     @map("telefone_cliente") @db.VarChar(20)
  items          OrderItem[]
  restaurant     Restaurant  @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  revenues       Revenue[]

  @@unique([restaurant_id, order_number])
  @@index([restaurant_id])
  @@index([restaurant_id, status])
  @@index([restaurant_id, created_at])
  @@map("pedidos")
}

model OrderItem {
  id            Int        @id @default(autoincrement()) @map("item_pedido_id")
  restaurant_id Int
  order_id      Int        @map("pedido_id")
  menu_item_id  Int        @map("item_cardapio_id")
  quantity      Int        @map("quantidade")
  unit_price    Decimal    @map("preco_unitario") @db.Decimal(10, 2)
  total_price   Decimal    @map("preco_total") @db.Decimal(10, 2)
  notes         String?    @map("observacoes")
  created_at    DateTime   @default(now())
  menu_item     MenuItem   @relation(fields: [menu_item_id], references: [id])
  order         Order      @relation(fields: [order_id], references: [id], onDelete: Cascade)
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  @@index([restaurant_id, order_id])
  @@index([menu_item_id])
  @@map("itens_pedido")
}
