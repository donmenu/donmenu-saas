generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model teste {
  idteste Int @id
}

model users {
  id       Int     @id @default(autoincrement())
  name     String?
  username String?
  email    String?
  obs      String?
}

model cardapios {
  id     Int     @id @default(autoincrement())
  item   String?
  status String?
}

model categories {
  category_id Int     @id @default(autoincrement())
  name        String
  description String?
  itens       itens[]
}

model ingredients {
  ingredient_id      Int                  @id @default(autoincrement())
  name               String
  unit               String
  cost_per_unit      Decimal
  stock              Decimal?             @default(0)
  created_at         DateTime             @default(now())
  ficha_ingredientes ficha_ingredientes[]
}

model item_ingredients {
  item_ingredient_id Int      @id @default(autoincrement())
  item_id            Int
  ingredient_id      Int
  quantity           Decimal?
}

model itens {
  item_id         Int               @id @default(autoincrement())
  category_id     Int
  name            String
  description     String
  price           Decimal
  status          Boolean           @default(true)
  created_at      DateTime          @default(now())
  fichas_tecnicas fichas_tecnicas[]
  category        categories        @relation(fields: [category_id], references: [category_id])
  pedido_itens    pedido_itens[]
}

model itens_pricing {
  item_pricing_id Int @id @default(autoincrement())
  item_id         Int
  rule_id         Int
}

model menu_items_price {
  menu_item_price_id Int       @id @default(autoincrement())
  menu_item_id       Int?
  price              Decimal?
  start_date         DateTime?
  end_date           DateTime?
}

model menu_itens {
  menu_item_id Int @id @default(autoincrement())
  menu_id      Int
  item_id      Int
}

model menu_promotions {
  menu_promotion_id Int       @id @default(autoincrement())
  menu_id           Int?
  name              String?
  description       String?
  start_date        DateTime?
  end_date          DateTime?
}

model menus {
  menu_id       Int     @id @default(autoincrement())
  restaurant_id Int?
  name          String?
  description   String?

  @@index([restaurant_id], map: "restaurant_id_idx")
}

model pricing_methods {
  method_id   Int    @id @default(autoincrement())
  name        String
  description String
}

model pricing_rules {
  rule_id             Int     @id @default(autoincrement())
  method_id           Int?
  name                String?
  description         String?
  calculation_formula String?
}

model restaurants {
  restaurant_id Int     @id @default(autoincrement())
  name          String?
}

model fichas_tecnicas {
  ficha_id           Int                  @id @default(autoincrement())
  item_id            Int
  yield              Decimal?
  total_cost         Decimal?
  price_suggestion   Decimal?
  created_at         DateTime             @default(now())
  ficha_ingredientes ficha_ingredientes[]
  item               itens                @relation(fields: [item_id], references: [item_id], onDelete: Cascade)
}

model ficha_ingredientes {
  id            Int             @id @default(autoincrement())
  ficha_id      Int
  ingredient_id Int
  quantity      Decimal
  ficha_tecnica fichas_tecnicas @relation(fields: [ficha_id], references: [ficha_id], onDelete: Cascade)
  ingredient    ingredients     @relation(fields: [ingredient_id], references: [ingredient_id])
}

model pedidos {
  pedido_id     Int       @id @default(autoincrement())
  mesa          String?
  cliente_nome  String?
  status        String    @default("pendente")
  total         Decimal   @default(0)
  observacoes   String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  pedido_itens  pedido_itens[]
  receitas      receitas[]
}

model pedido_itens {
  id           Int      @id @default(autoincrement())
  pedido_id    Int
  item_id      Int
  quantidade   Int      @default(1)
  preco_unit   Decimal
  observacoes  String?
  created_at   DateTime @default(now())
  pedido       pedidos  @relation(fields: [pedido_id], references: [pedido_id], onDelete: Cascade)
  item         itens    @relation(fields: [item_id], references: [item_id])
}

model caixa {
  caixa_id       Int       @id @default(autoincrement())
  data_abertura  DateTime  @default(now())
  data_fechamento DateTime?
  valor_inicial  Decimal   @default(0)
  valor_final    Decimal?
  observacoes    String?
  status         String    @default("aberto")
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  
  receitas       receitas[]
  despesas       despesas[]
}

model categorias_financeiras {
  categoria_id   Int       @id @default(autoincrement())
  nome           String
  tipo           String
  descricao      String?
  cor            String?
  created_at     DateTime  @default(now())
  
  receitas       receitas[]
  despesas       despesas[]
}

model receitas {
  receita_id     Int       @id @default(autoincrement())
  caixa_id       Int?
  categoria_id   Int?
  pedido_id      Int?
  descricao      String
  valor          Decimal
  data_receita   DateTime  @default(now())
  forma_pagamento String?
  observacoes    String?
  created_at     DateTime  @default(now())
  
  caixa          caixa?    @relation(fields: [caixa_id], references: [caixa_id])
  categoria      categorias_financeiras? @relation(fields: [categoria_id], references: [categoria_id])
  pedido         pedidos?  @relation(fields: [pedido_id], references: [pedido_id])
}

model despesas {
  despesa_id     Int       @id @default(autoincrement())
  caixa_id       Int?
  categoria_id   Int?
  descricao      String
  valor          Decimal
  data_despesa   DateTime  @default(now())
  forma_pagamento String?
  fornecedor     String?
  nota_fiscal    String?
  observacoes    String?
  created_at     DateTime  @default(now())
  
  caixa          caixa?    @relation(fields: [caixa_id], references: [caixa_id])
  categoria      categorias_financeiras? @relation(fields: [categoria_id], references: [categoria_id])
}
